export interface Point {
    x: number;
    y: number;
}
export interface DrawPoint extends Point {
    cp1?: Point;
    cp2?: Point;
}
export declare function point(x: number, y: number): Point;
declare type ModFunction = (...dim: number[]) => number;
/**
 * Make a new point where each dimension is the result of applying a function to
 * the corresponding dimension of a list of control points.
 * @param func
 * @param cps
 * @returns {{x, y}|*}
 */
export declare function makePoint(func: ModFunction, ...cps: DrawPoint[]): DrawPoint;
export declare const origin: Readonly<Point>;
/**
 * Insert this special point in the list of points given to drawPoints to
 * move to the next point instead of drawing to the next point
 * @readonly
 * @type {Object}
 */
export declare const breakPoint: Readonly<{
    break: boolean;
}>;
/**
 * Signals for a fill path to not try to complete it by drawing a curve from end
 * point to first point as the fill has already done its job
 * move to the next point instead of drawing to the next point
 * @readonly
 * @type {Object}
 */
export declare const endPoint: Readonly<{
    end: boolean;
}>;
/**
 * Treat points as vectors and add them, optionally after scaling p2
 * @param p1
 * @param p2
 * @param scaleBy
 * @returns {{x: *, y: *}}
 */
export declare function add(p1: Point, p2: Point, scaleBy?: number): Point;
/**
 * Get the difference of 2 draw points p2 - p1; conceptually a vector pointing p1 -> p2
 * @param {{x:number, y:number}} p1 First point
 * @param {{x:number, y:number}} p2 Second point
 * @returns {{x: number, y: number}}
 */
export declare function diff(p1: Point, p2: Point): Point;
/**
 * Get the magnitude of a vector
 * @param vec
 * @returns {number} Euclidean (L^2) norm of vec
 */
export declare function norm(vec: Point): number;
/**
 * Get the angle of a vector in radians
 * @param vec
 * @returns {number} Angle in radians
 */
export declare function angle(vec: Point): number;
/**
 * Get a point after scaling it relative to a reference point.
 * Grows the vector referencePt -> pt by scaleBy.
 * @param pt
 * @param scaleBy
 * @param referencePt The point from which to scale
 * @returns {{x: *, y: *}}
 */
export declare function scale(pt: Point, scaleBy: number, referencePt?: Point): Point;
/**
 * Relative to 0,0, get the direction a draw point/vector is pointing at
 * @param vec
 * @returns {{x: number, y: number}}
 */
export declare function getUnitVector(vec: Point): Point;
/**
 * Get counterclockwise perpendicular unit vector
 * @param vec Point that doubles as a vector from (0,0) to the point
 * @returns {{x: number, y: number}}
 */
export declare function getPerpendicularVector(vec: Point): Point;
/**
 * Remove any extra information from a point down to just x,y
 */
export declare function extractPoint(pt: Point): Point;
/**
 * Remove any extra information from a point and reflect across y axis
 */
export declare function reflect(pt: Point, m?: number, b?: number): Point;
/**
 * Shift a draw point and its control points
 * @param {object} pt
 * @param {number} dx
 * @param {number} dy
 * @returns {object}
 */
export declare function adjust(pt: DrawPoint, dx: number, dy: number): DrawPoint;
/**
 * Shift a sequence of draw points and return the shifted points
 * @param dx
 * @param dy
 * @param points
 * @returns {Array}
 */
export declare function adjustPoints(dx: number, dy: number, ...points: DrawPoint[]): DrawPoint[];
/**
 * Explode or shrink points around a center point in place
 * @param center The point other points are scaled relative to
 * @param {number} scaleBy Multiplier for the distance between each point and center
 * @param points Points to scale relative to center
 */
export declare function scalePoints(center: Point, scaleBy: number, ...points: DrawPoint[]): void;
/**
 * Rotate a set of points about a pivot in place
 * @param {object} pivot The point to rotate about
 * @param {number} rad Radians counterclockwise to rotate points
 * @param points List of points to rotate about pivot
 */
export declare function rotatePoints(pivot: Point, rad: number, ...points: DrawPoint[]): void;
export {};
