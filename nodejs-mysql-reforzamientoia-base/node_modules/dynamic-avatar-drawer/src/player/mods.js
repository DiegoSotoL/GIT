import {statLimits} from "./stats";
import {baseDimDesc} from "./dimensions";
import {Location} from "../util/part";
import {vitalLimits} from "./vitals";


// idosyncratic stats (random deviations for each person)
// could also be modified by items
// only put numerical values here
export const modLimits = {
    // NEW mods API
    armRotation: {
        linkedPart: `${Location.ARM}`,
        units     : "degree",
        low       : -40,
        high      : 40,
        avg       : 0,
        stdev     : 0,
        bias      : 0,
    },
    arousal    : {
        units: "arbitrary",
        low  : 0,
        high : 100,
        avg  : 10,
        stdev: 5,
        bias : 0,
    },

    breastPerkiness: {
        linkedPart: `${Location.CHEST}`,
        desc      : "counter sagging effect when breasts grow too large",
        units     : "arbitrary",
        low       : -10,
        high      : 20,
        avg       : 0,
        stdev     : 2,
        bias      : 0,
    },
    browBotCurl    : {
        linkedPart: `${Location.EYEBROW}`,
        desc      : "How much the bottom of the eyebrow curls up or down; 0 is flat",
        units     : "mm",
        low       : -10,
        high      : 15,
        avg       : 3,
        stdev     : 2,
        bias      : 3,
    },
    browTopCurl    : {
        linkedPart: `${Location.EYEBROW}`,
        desc      : "How much the top of the eyebrow curls up or down; 0 is flat",
        units     : "mm",
        low       : -10,
        high      : 15,
        avg       : 8,
        stdev     : 2,
        bias      : 1,
    },
    browCloseness  : {
        linkedPart: `${Location.EYEBROW}`,
        units     : "mm",
        low       : -10,
        high      : 10,
        avg       : 0,
        stdev     : 2,
        bias      : 0,
    },
    browHeight     : {
        linkedPart: `${Location.EYEBROW}`,
        units     : "mm",
        low       : -10,
        high      : 10,
        avg       : 0,
        stdev     : 2,
        bias      : 0,
    },
    browLength     : {
        linkedPart: `${Location.EYEBROW}`,
        units     : "mm",
        low       : -10,
        high      : 10,
        avg       : 0,
        stdev     : 2,
        bias      : 0,
    },
    browSharpness  : {
        linkedPart: `${Location.EYEBROW}`,
        units     : "arbitrary",
        low       : -10,
        high      : 10,
        avg       : 0,
        stdev     : 2,
        bias      : 0,
    },
    browThickness  : {
        linkedPart: `${Location.EYEBROW}`,
        units     : "mm",
        low       : -10,
        high      : 10,
        avg       : 0,
        stdev     : 1,
        bias      : -1.5,
    },

    browOutBias: {
        linkedPart: `${Location.EYEBROW}`,
        desc      : "Whether the top of the outer brow ends inside or outside the bottom",
        units     : "mm",
        low       : -10,
        high      : 10,
        avg       : -1,
        stdev     : 2,
        bias      : 0,
    },
    browTilt   : {
        linkedPart: `${Location.EYEBROW}`,
        units     : "degree",
        low       : -20,
        high      : 20,
        avg       : 5,
        stdev     : 4,
        bias      : 0,
    },


    cheekFullness          : {
        linkedPart: `${Location.HEAD}`,
        units     : "arbitrary",
        low       : -20,
        high      : 20,
        avg       : 0,
        stdev     : 3,
        bias      : 0,
    },
    chinLength             : {
        linkedPart: `${Location.HEAD}`,
        units     : "mm",
        low       : -30,
        high      : 30,
        avg       : 0,
        stdev     : 3,
        bias      : 0,
    },
    // ear lobe length
    earlobeLength          : {
        linkedPart: `${Location.EAR}`,
        low       : -2,
        high      : 4,
        avg       : 0,
        stdev     : 0.2,
        bias      : 0
    },
    eyeBias                : {
        linkedPart: `${Location.EYES}`,
        desc      : "Whether the eyes bias towards the inside or outside",
        units     : "arbitrary",
        low       : -10,
        high      : 10,
        avg       : 1,
        stdev     : 2,
        bias      : 0,
    },
    eyeCloseness           : {
        linkedPart: `${Location.EYES}`,
        units     : "mm",
        low       : -100,
        high      : 100,
        avg       : 0,
        stdev     : 5,
        bias      : 0,
    },
    eyeBotBias             : {
        linkedPart: `${Location.EYES}`,
        desc      : "Whether the eye bottom bias towards the inside or outside",
        units     : "arbitrary",
        low       : -10,
        high      : 10,
        avg       : 0,
        stdev     : 2,
        bias      : 0,
    },
    eyeBotSize             : {
        linkedPart: `${Location.EYES}`,
        desc      : "How much does the bottom of the eyes dip",
        units     : "mm",
        low       : -20,
        high      : 20,
        avg       : 0,
        stdev     : 0,
        bias      : 1,
    },
    eyeHeight              : {
        linkedPart: `${Location.EYES}`,
        units     : "mm",
        low       : -15,
        high      : 10,
        avg       : -3,
        stdev     : 2,
        bias      : 0,
    },
    eyeTilt                : {
        linkedPart: `${Location.EYES}`,
        units     : "degree",
        low       : -20,
        high      : 30,
        avg       : 2,
        stdev     : 4,
        bias      : 0,
    },
    eyeTopSize             : {
        linkedPart: `${Location.EYES}`,
        desc      : "How much does the top of the eyes curve",
        units     : "mm",
        low       : -10,
        high      : 8,
        avg       : 0,
        stdev     : 0.5,
        bias      : 0,
    },
    eyeWidth               : {
        linkedPart: `${Location.EYES}`,
        units     : "mm",
        low       : -10,
        high      : 10,
        avg       : 0,
        stdev     : 2,
        bias      : 0,
    },
    eyelashBias            : {
        linkedPart: `${Location.EYELASH}`,
        desc      : "Whether the eyelashes bias towards the inside or outside",
        units     : "arbitrary",
        low       : -10,
        high      : 20,
        avg       : 5,
        stdev     : 1,
        bias      : 0,
    },
    eyelashAngle           : {
        linkedPart: `${Location.EYELASH}`,
        desc      : "Whether the eyelash points down or up",
        units     : "arbitrary",
        low       : -1,
        high      : 1,
        avg       : 0.9,
        stdev     : 0,
        bias      : 0,
    },
    eyelidBias             : {
        linkedPart: `${Location.EYELID}`,
        desc      : "Whether the eyelids bias towards the inside or outside",
        units     : "arbitrary",
        low       : -10,
        high      : 10,
        avg       : 1,
        stdev     : 2,
        bias      : 0,
    },
    eyelidHeight           : {
        linkedPart: `${Location.EYELID}`,
        units     : "mm",
        low       : -6,
        high      : 12,
        avg       : 0,
        stdev     : 2,
        bias      : 0,
    },
    feetBias               : {
        linkedPart: `${Location.FEET}`,
        desc      : "Relative importance of inner toes vs outer toes",
        units     : "arbitrary",
        low       : -10,
        high      : 20,
        avg       : 0,
        stdev     : 2,
        bias      : 0,
    },

    hairAccessoryHue       : {
        linkedPart: `${Location.HAIR}`,
        units     : "degree",
        low       : 0,
        high      : 360,
        avg       : 360,
        stdev     : 50,
        bias      : 0,
    },
    hairAccessorySaturation: {
        linkedPart: `${Location.HAIR}`,
        units     : "%",
        low       : 0,
        high      : 100,
        avg       : 80,
        stdev     : 5,
        bias      : 0,
    },
    hairAccessoryLightness : {
        linkedPart: `${Location.HAIR}`,
        units     : "%",
        low       : 0,
        high      : 100,
        avg       : 50,
        stdev     : 10,
        bias      : 0,
    },
    handRotation           : {
        linkedPart: `${Location.HAND}`,
        units     : "degree",
        low       : -40,
        high      : 40,
        avg       : 0,
        stdev     : 0,
        bias      : 0,
    },
    irisHeight             : {
        linkedPart: `${Location.IRIS}`,
        units     : "mm",
        low       : -10,
        high      : 10,
        avg       : 0,
        stdev     : 1,
        bias      : 0,
    },
    irisHue                : {
        linkedPart: `${Location.IRIS}`,
        units     : "degree",
        low       : 0,
        high      : 360,
        avg       : 30,
        stdev     : 30,
        bias      : 0,
    },
    irisSaturation         : {
        linkedPart: `${Location.IRIS}`,
        units     : "%",
        low       : 0,
        high      : 100,
        avg       : 50,
        stdev     : 10,
        bias      : 0,
    },
    irisLightness          : {
        linkedPart: `${Location.IRIS}`,
        units     : "%",
        low       : 0,
        high      : 100,
        avg       : 20,
        stdev     : 10,
        bias      : 0,
    },
    irisSize               : {
        linkedPart: `${Location.IRIS}`,
        desc      : "Diameter of the iris",
        units     : "mm",
        low       : 0,
        high      : 50,
        avg       : 16,
        stdev     : 1.5,
        bias      : 0,
    },
    // how prominantly the lower jaw juts out (in mm)
    jawJut                 : {
        linkedPart: `${Location.HEAD}`,
        units     : "mm",
        low       : -10,
        high      : 10,
        avg       : 0,
        stdev     : 0.5,
        bias      : 0
    },
    limbalRingSize         : {
        linkedPart: `${Location.IRIS}`,
        desc      : "Width of the limbal ring (dark ring surrounding iris)",
        units     : "um",
        low       : 0,
        high      : 100,
        avg       : 20,
        stdev     : 5,
        bias      : 0,
    },
    lipBias                : {
        linkedPart: `${Location.LIPS}`,
        desc      : "Whether the top lip sits above the bottom lip or vise versa",
        units     : "arbitrary",
        low       : -50,
        high      : 50,
        avg       : 10,
        stdev     : 10,
        bias      : 0,
    },
    // how far apart the cupid bow corners are
    lipCupidsBow           : {
        linkedPart: `${Location.LIPS}`,
        units     : "mm",
        low       : -100,
        high      : 30,
        avg       : 0,
        stdev     : 20,
        bias      : 0,
    },
    lipCurl                : {
        linkedPart: `${Location.LIPS}`,
        units     : "arbitrary",
        low       : -20,
        high      : 20,
        avg       : 0,
        stdev     : 5,
        bias      : 0,
    },
    lipHeight              : {
        linkedPart: `${Location.LIPS}`,
        units     : "mm",
        low       : -10,
        high      : 10,
        avg       : 0,
        stdev     : 1.2,
        bias      : 0,
    },
    // whether we curve up or down up to the cupid bow corner
    lipTopCurve            : {
        linkedPart: `${Location.LIPS}`,
        units     : "arbitrary",
        low       : -50,
        high      : 50,
        avg       : 0,
        stdev     : 10,
        bias      : 0,
    },
    lipTopSize             : {
        linkedPart: `${Location.LIPS}`,
        units     : "um",
        low       : -20,
        high      : 60,
        avg       : 8,
        stdev     : 4,
        bias      : 0,
    },
    lipBotSize             : {
        linkedPart: `${Location.LIPS}`,
        units     : "mm",
        low       : -80,
        high      : 100,
        avg       : 30,
        stdev     : 10,
        bias      : 3,
    },

    lipParting      : {
        linkedPart: `${Location.LIPS}`,
        units     : "um",
        low       : 0,
        high      : 100,
        avg       : 0,
        stdev     : 0,
        bias      : 0,
    },
    lipWidth        : {
        linkedPart: `${Location.LIPS}`,
        units     : "mm",
        low       : -250,
        high      : 100,
        avg       : 0,
        stdev     : 30,
        bias      : -70,
    },
    lipHue          : {
        linkedPart: `${Location.LIPS}`,
        units     : "degree",
        low       : -180,
        high      : 180,
        avg       : 0,
        stdev     : 4,
        bias      : 0,
    },
    lipSaturation   : {
        linkedPart: `${Location.LIPS}`,
        units     : "%",
        low       : -20,
        high      : 20,
        avg       : 0,
        stdev     : 2,
        bias      : 0,
    },
    lipLightness    : {
        linkedPart: `${Location.LIPS}`,
        units     : "%",
        low       : -20,
        high      : 20,
        avg       : 0,
        stdev     : 2,
        bias      : 0,
    },
    nippleHue       : {
        linkedPart: `${Location.CHEST}`,
        units     : "degree",
        low       : -180,
        high      : 180,
        avg       : 0,
        stdev     : 2,
        bias      : 0,
    },
    nippleSaturation: {
        linkedPart: `${Location.CHEST}`,
        units     : "%",
        low       : -20,
        high      : 20,
        avg       : 0,
        stdev     : 2,
        bias      : 0,
    },
    nippleLightness : {
        linkedPart: `${Location.CHEST}`,
        units     : "%",
        low       : -20,
        high      : 20,
        avg       : 0,
        stdev     : 2,
        bias      : 0,
    },
    neckCurve       : {
        linkedPart: `${Location.NECK}`,
        units     : "mm",
        low       : -20,
        high      : 10,
        avg       : -5,
        stdev     : 3,
        bias      : -2,
    },

    noseHeight: {
        linkedPart: `${Location.NOSE}`,
        units     : "mm",
        low       : -10,
        high      : 10,
        avg       : 0,
        stdev     : 4,
        bias      : 0,
    },

    noseLength     : {
        linkedPart: `${Location.NOSE}`,
        units     : "mm",
        low       : 0,
        high      : 70,
        avg       : 45,
        stdev     : 3,
        bias      : 0,
    },
    noseRidgeHeight: {
        linkedPart: `${Location.NOSE}`,
        units     : "mm",
        low       : -10,
        high      : 10,
        avg       : 0,
        stdev     : 2,
        bias      : 0,
    },
    noseRoundness  : {
        linkedPart: `${Location.NOSE}`,
        units     : "arbitrary",
        low       : -6,
        high      : 10,
        avg       : 0,
        stdev     : 2,
        bias      : 0,
    },
    noseWidth      : {
        linkedPart: `${Location.NOSE}`,
        units     : "mm",
        low       : 10,
        high      : 30,
        avg       : 18,
        stdev     : 2,
        bias      : -1,
    },
    nostrilSize    : {
        linkedPart: `${Location.NOSE}`,
        units     : "mm",
        low       : 5,
        high      : 30,
        avg       : 10,
        stdev     : 2,
        bias      : 0,
    },
    pupilSize      : {
        linkedPart: `${Location.PUPIL}`,
        desc      : "Diameter of the pupil",
        units     : "mm",
        low       : 0,
        high      : 20,
        avg       : 10,
        stdev     : 0.5,
        bias      : 0,
    },

    labiaFullness : {
        linkedPart: `${Location.GENITALS}`,
        desc      : "How puffy the labia is",
        units     : "arbitrary",
        low       : -10,
        high      : 10,
        avg       : 0,
        stdev     : 1,
        bias      : 1,
    },
    penisThickness: {
        linkedPart: `${Location.GENITALS}`,
        units     : "um",
        low       : -30,
        high      : 30,
        avg       : 0,
        stdev     : 4,
        bias      : -4,
    },
    shoeHeight    : {
        units: "mm",
        low  : 0,
        high : 300,
        avg  : 0,
        stdev: 0,
        bias : 0,
    },
    skinHue       : {
        units: "degree",
        low  : -180,
        high : 180,
        avg  : 0,
        stdev: 2,
        bias : 0,
    },
    skinSaturation: {
        units: "%",
        low  : -20,
        high : 20,
        avg  : 0,
        stdev: 2,
        bias : 0,
    },
    skinLightness : {
        units: "%",
        low  : -20,
        high : 20,
        avg  : 0,
        stdev: 2,
        bias : 0,
    },
};
export const modDiscretePool = {};


// fill out modifier for numerical stats if they don't exist
export function loadMods() {
    [statLimits, vitalLimits, baseDimDesc["human"]].forEach((limits) => {
        Object.entries(limits).forEach(([p, limit]) => {
            if (!modLimits.hasOwnProperty(p)) {
                const range = limit.high - limit.low;
                modLimits[p] = {
                    low  : -1e9,
                    high : 1e9,
                    avg  : 0,
                    stdev: range * 0.01,
                    bias : 0
                };
                if (limit.linkedPart) {
                    modLimits[p].linkedPart = limit.linkedPart;
                }
            }
        });
    });
}

